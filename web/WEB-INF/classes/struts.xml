<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
        "http://struts.apache.org/dtds/struts-2.3.dtd">
<struts>

    <!-- i18n:国际化. 解决post提交乱码 -->
    <constant name="struts.i18n.encoding" value="UTF-8"/>
    <!-- 指定反问action时的后缀名
        http://localhost:8080/struts2_day01/hello/HelloAction.do
    -->
    <constant name="struts.action.extension" value="action"/>
    <!-- 指定struts2是否以开发模式运行
            1.热加载主配置.(不需要重启即可生效)
            2.提供更多错误信息输出,方便开发时的调试
     -->
    <constant name="struts.devMode" value="true"/>


    <!-- package:将Action配置封装.就是可以在Package中配置很多action.
            name属性: 给包起个名字,起到标识作用.随便起.不能其他包名重复.
            namespace属性:给action的访问路径中定义一个命名空间
            extends属性: 继承一个 指定包
            abstract属性:包是否为抽象的; 标识性属性.标识该包不能独立运行.专门被继承
      -->
    <package name="hello" namespace="/hello" extends="struts-default">
        <!-- action元素:配置action类
                name属性: 决定了Action访问资源名.
                class属性: action的完整类名
                method属性: 指定调用Action中的哪个方法来处理请求
         -->
        <action name="HelloAction" class="com.paxsz.a_hello.HelloAction" method="hello">
            <!-- result元素:结果配置
                    name属性: 标识结果处理的名称.与action方法的返回值对应.
                    type属性: 指定调用哪一个result类来处理结果,默认使用转发.
                    标签体:填写页面的相对路径
            -->
            <result name="success" type="dispatcher">/hello.jsp</result>
        </action>
    </package>
    <!-- 引入其他struts配置文件 -->
    <include file="com/paxsz/b_dynamic/struts.xml"/>
    <include file="com/paxsz/c_default/struts.xml"/>

    <!-- e_result -->
    <package name="result" namespace="/" extends="struts-default">
        <!--  转发 -->
        <action name="Demo1Action" class="com.paxsz.e_result.Demo1Action" method="execute">
            <result name="success" type="dispatcher">/hello.jsp</result>
        </action>
        <!--  重定向 -->
        <action name="Demo2Action" class="com.paxsz.e_result.Demo2Action" method="execute">
            <result name="success" type="redirect">/hello.jsp</result>
        </action>
        <!--  转发到Action -->
        <action name="Demo3Action" class="com.paxsz.e_result.Demo3Action" method="execute">
            <result name="success" type="chain">
                <!-- action的名字 -->
                <param name="actionName">Demo1Action</param>
                <!-- action所在的命名空间 -->
                <param name="namespace">/</param>
            </result>
        </action>
        <!--  重定向Action -->
        <action name="Demo4Action" class="com.paxsz.e_result.Demo4Action" method="execute">
            <result name="success" type="redirectAction">
                <!-- action的名字 -->
                <param name="actionName">Demo1Action</param>
                <!-- action所在的命名空间 -->
                <param name="namespace">/</param>
            </result>
        </action>
    </package>

    <!-- f_api -->
    <include file="com/paxsz/f_api/struts.xml"/>

    <!-- g_param -->
    <include file="com/paxsz/g_param/struts.xml"/>

    <!-- i_showvs -->
    <package name="showvs" namespace="/showvs" extends="struts-default">
        <action name="DemoAction" class="com.paxsz.i_showvs.DemoAction" method="execute">
            <result name="success" type="dispatcher">/showvs.jsp</result>
        </action>
    </package>

    <!-- j_interceptor -->
    <package name="inter" namespace="/inter" extends="struts-default">
        <interceptors>
            <!-- 1.注册拦截器 -->
            <interceptor name="myInterceptor" class="com.paxsz.j_interceptor.MyInterceptor3"/>
            <!-- 2.注册拦截器栈 -->
            <interceptor-stack name="myStack">
                <!-- 自定义拦截器引入(建议放在20个拦截器之前) -->
                <interceptor-ref name="myInterceptor">
                    <!-- 指定哪些方法不拦截 -->
                    <!-- param name="excludeMethods">add,delete</param -->
                    <!-- 指定哪些方法需要拦截 -->
                    <param name="includeMethods">add,delete</param>
                </interceptor-ref>
                <!-- 引用默认的拦截器栈(20个) -->
                <interceptor-ref name="defaultStack"/>
            </interceptor-stack>
        </interceptors>
        <!-- 3.指定包中的默认拦截器栈 -->
        <default-interceptor-ref name="myStack"/>
        <action name="Demo1Action_*" class="com.paxsz.j_interceptor.Demo1Action" method="{1}">
            <!-- 为Action单独指定走哪个拦截器(栈)
			<interceptor-ref name="myStack"></interceptor-ref>-->
            <result name="success" type="dispatcher">/index.jsp</result>
        </action>
    </package>

    <!-- k_tag -->
    <package name="tag" namespace="/tag" extends="struts-default">
        <action name="Demo2Action" class="com.paxsz.k_tag.Demo2Action" method="execute">
            <result name="success" type="dispatcher">/tag1.jsp</result>
        </action>
        <action name="Demo3Action" class="com.paxsz.k_tag.Demo3Action" method="execute" >
            <result name="success" type="dispatcher" >/tag2.jsp</result>
        </action>
    </package>
</struts>